;;-*-Lisp-*-
(in-package goal)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Orange Demon Challenge
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defconstant NOTICE_DIST (meters 10000))

(defconstant STOP_CHASE_DIST (meters 100000))

(defconstant ORANGE_DEMON_DEBUG #f)

(defconstant ORANGE_DEMON_MAX_SPEED 0.47)

(define-extern orange-demon-init-by-other (function vector object :behavior orange-demon))

(defun target-special-state? ()
  (let* ((state (-> *target* next-state name))
         (slow-down-state? (symbol-member? state '(target-swim-down target-swim-up target-yellow-jump-blast target-look-around)))
         (racer? (logtest? (-> *target* control root-prim prim-core action) (collide-action racer)))
         (flut? (logtest? (-> *target* control root-prim prim-core action) (collide-action flut))))
    (or slow-down-state? racer? flut?)))

(defun scale-traj-time ()
  "Scale the trajectory time based on game progress and special states."
  (let* ((val (/ (- 100.0 (calculate-completion (the progress #f))) 100.0))
         (state (-> *target* next-state name))
         (slow-down-state? (symbol-member? state '(target-swim-down target-swim-up target-yellow-jump-blast target-look-around)))
         (racer? (logtest? (-> *target* control root-prim prim-core action) (collide-action racer)))
         (flut? (logtest? (-> *target* control root-prim prim-core action) (collide-action flut)))
         (ogre? (process-by-ename "ogreboss-1"))
         (slow-down-factor (if ogre? 1.6 1.3))
         (red-eco? (and (= (-> *target* fact eco-type) (pickup-type eco-red)) (>= (-> *target* fact eco-level) 1.0)))
         (clamp (cond
                  (racer? 0.25)
                  (flut? 0.38)
                  (red-eco? 0.59)
                  (slow-down-state? (* ORANGE_DEMON_MAX_SPEED slow-down-factor))
                  (red-eco? (* ORANGE_DEMON_MAX_SPEED 1.4))
                  (else ORANGE_DEMON_MAX_SPEED)))
         (val-special (cond
                        (slow-down-state? (* val slow-down-factor))
                        (red-eco? (* val 1.4))
                        (flut? (/ val 1.23))
                        (racer? (/ val 1.4))
                        (else val))))
    (if (< val-special clamp) clamp val-special)))

(defun target-pos-with-offset ()
  (let ((vec (new-stack-vector0))
        (offset (new-stack-vector0))
        (negative? (if (rand-vu-percent? 0.5) -1.0 1.0)))
    (vector-copy! vec (target-pos 0))
    ;; add a random offset
    (set-vector! offset
                 (* negative? (meters (rand-vu-int-range 30 40)))
                 (meters (rand-vu-int-range 0 10))
                 (* negative? (meters (rand-vu-int-range 30 40)))
                 (meters 0))
    (vector+! vec vec offset)))

(defbehavior sleep-code process ()
  (loop
    (logior! (-> self mask) (process-mask sleep-code))
    (suspend)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; orange-demon-manager
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defmethod deactivate ((this orange-demon-manager))
  (set! *orange-demon-manager* (the (pointer orange-demon-manager) #f))
  (if (-> this demon) (deactivate (handle->process (-> this demon))))
  (call-parent-method this))

(defbehavior orange-demon-manager-event-handler orange-demon-manager ((proc process) (arg1 int) (event symbol) (msg event-message-block))
  (case event
    (('spawn)
     (when (not (-> self demon))
       (set! (-> self demon) (ppointer->handle (process-spawn orange-demon (target-pos-with-offset))))
       #t)
     #f)
    (('die) (deactivate self) #t)))

(defstate orange-demon-manager-idle (orange-demon-manager)
  :event orange-demon-manager-event-handler
  :code sleep-code)

(defbehavior orange-demon-manager-init-by-other orange-demon-manager ((spawn? symbol))
  (if spawn?
    (set! (-> self demon) (ppointer->handle (process-spawn orange-demon (target-pos-with-offset))))
    (set! (-> self demon) (the handle #f)))
  (go orange-demon-manager-idle))

(defun orange-demon-manager-start ((spawn? symbol))
  (if (not *orange-demon-manager*) (set! *orange-demon-manager* (process-spawn orange-demon-manager spawn?)))
  (none))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; orange-demon
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defmethod debug-draw-text! ((this orange-demon))
  (let ((bucket (bucket-id debug-no-zbuf))
        (root (-> this root trans))
        (yellow (font-color yellow)))
    (add-debug-x #t bucket root (static-rgba #x80 #xff #x80 #x80))
    (add-debug-text-3d #t bucket (symbol->string (-> this next-state name)) root yellow (the vector2h #f))))

(defmethod run-logic? ((this orange-demon))
  #t)

(defmethod dist-to-target ((this orange-demon))
  (vector-vector-distance (-> this root trans) (target-pos 0)))

(defmethod deactivate ((this orange-demon))
  (send-event *target* 'sidekick #t)
  (call-parent-method this))

;; (defmethod relocate ((this orange-demon) (off int))
;;   (the orange-demon ((the (function process-drawable int none) (find-parent-method orange-demon 7)) this off))
;;   )

(defmethod init-collision! ((this orange-demon))
  (let ((cshape (new 'process 'collide-shape-moving this (collide-list-enum usually-hit-by-player))))
    (set! (-> cshape dynam) (copy *standard-dynamics* 'process))
    (set! (-> cshape reaction) default-collision-reaction)
    (set! (-> cshape no-reaction) (the (function collide-shape-moving collide-shape-intersect vector vector none) nothing))
    ;; set up a prim group with one sphere
    (let ((prim-group (new 'process 'collide-shape-prim-group cshape (the uint 1) 0)))
      (set! (-> prim-group prim-core collide-as) (collide-kind enemy))
      (set! (-> prim-group collide-with) (collide-kind target))
      (set! (-> prim-group prim-core offense) (collide-offense touch))
      (set-vector! (-> prim-group local-sphere) 0.0 (meters 0.5) 0.0 (meters 1.25))
      (set-root-prim! cshape prim-group)
      (let ((prim-sphere (new 'process 'collide-shape-prim-sphere cshape (the uint 1))))
        (set! (-> prim-sphere prim-core collide-as) (collide-kind enemy))
        (set! (-> prim-sphere collide-with) (collide-kind target))
        (set! (-> prim-sphere prim-core offense) (collide-offense touch))
        (set-vector! (-> prim-sphere local-sphere) 0.0 (meters 0.5) 0.0 (meters 0.5))
        (append-prim prim-group prim-sphere)))
    (set! (-> cshape max-iteration-count) (the uint 2))
    (backup-collide-with-as cshape)
    (set! (-> this root) cshape)))

(defmethod init-skel! ((this orange-demon))
  (initialize-skeleton this *sidekick-sg* '())
  (set! (-> this draw origin-joint-index) (the uint 6))
  (set! (-> this draw shadow-joint-index) (the uint 6))
  (logior! (-> this skel status) (janim-status eye))
  (set! (-> this draw shadow-ctrl) *target-shadow-control*))

(defmethod common-init! ((this orange-demon))
  (init-collision! this)
  (process-mask-set! (-> this mask) progress menu)
  (init-skel! this)
  (set! (-> this align) (new 'process 'align-control this))
  (set! (-> this notice-dist) NOTICE_DIST)
  (set! (-> this stop-chase-dist) STOP_CHASE_DIST)
  (set! (-> this traj-time) 1.0)
  (set! (-> this grace-period) (seconds 0))
  (set! (-> this part) (create-launch-control (-> *part-group-id-table* 800) this)))

(defbehavior orange-demon-init-by-other orange-demon ((vec vector))
  (common-init! self)
  (vector-copy! (-> self root trans) vec)
  (go orange-demon-dormant))

(defmethod init-from-entity! ((this orange-demon) (entity entity-actor))
  (common-init! this)
  (process-drawable-from-entity! this entity)
  (go orange-demon-dormant)
  (none))

(defbehavior orange-demon-follow-trajectory orange-demon ((time float))
  (let ((traj (-> self trajectory)))
    (eval-position! traj time (-> self root trans))
    (eval-velocity! traj time (-> self root transv)))
  (vector-normalize-copy! (-> self dir) (-> self root transv) 1.0)
  (forward-up->quaternion (-> self root quat) (-> self dir) *up-vector*)
  (none))

(defbehavior send-attack! orange-demon ((proc process) (tshapes touching-shapes-entry))
  (when (and (logtest? (-> *target* control root-prim prim-core action) (collide-action racer))
             (send-event proc 'attack tshapes (static-attack-info ((mode 'explode)))))
    (set-collide-offense (-> self root) 1 (collide-offense no-offense))
    (return #t))
  (when (send-event proc 'attack tshapes (static-attack-info ((mode 'death))))
    (set-collide-offense (-> self root) 1 (collide-offense no-offense))
    (return #t))
  #f)

(defmethod touch-handler ((this orange-demon) (proc process) (msg event-message-block))
  (when (> (-> this grace-period) (seconds 0))
    (return #f))
  (when (prims-touching? (the touching-shapes-entry (-> msg param 0)) (-> this root) (the uint 1))
    (send-attack! proc (the touching-shapes-entry (-> msg param 0)))))

(defbehavior orange-demon-event-handler orange-demon ((proc process) (argc int) (event symbol) (msg event-message-block))
  (case event
    (('touch 'attack) (when (= (-> proc type) target) (touch-handler self proc msg)))))

(defmethod target-in-range? ((this orange-demon) (dist float))
  "Is [[target]] close enough?"
  (and *target* (< (vector-vector-distance (target-pos 0) (-> this root trans)) dist)))

(defmethod should-chase? ((this orange-demon))
  "Should we chase after [[target]]?"
  (if *target*
    (let* ((state (-> *target* next-state name))
           (exclude-state? (symbol-member? state
                                           '(target-racing-get-on target-racing-get-off
                                                                 target-racing-get-off-jump
                                                                 target-flut-get-on
                                                                 target-flut-get-off
                                                                 target-flut-get-off-jump
                                                                 target-warp-in
                                                                 target-warp-out)))
           (target-anim (-> *target* skel channel 0 frame-group name))
           (level (aif (level-get-target-inside *level*) (-> it name) #f))
           ;; hack to prevent dying after launching out of the temple and lpc helix
           (temple-helix-hack? (and (string= target-anim "eichar-launch-jump") (symbol-member? level '(jungle jungleb sunken sunkenb)))))
      (and (not (logtest? (-> *target* state-flags)
                          (state-flags grabbed being-attacked invulnerable timed-invulnerable invuln-powerup do-not-notice dying)))
           (not temple-helix-hack?)
           (target-in-range? this (-> this notice-dist))
           (not (or exclude-state?
                    (aif (process-by-ename "billy-2") (= (-> it next-state name) 'billy-playing)) ;; rats
                    (aif (the level-hint (process-by-name "level-hint" *active-pool*)) (string= (-> it sound-to-play) "gamcam20")) ;; mole cam
                    (and (movie?)
                         (-> *art-control* spool-lock)
                         (-> *art-control* active-stream)
                         (nmember (-> *art-control* active-stream) '("race-ring-anim" "race-ring-second-anim" "happy-plant-open")))))
           (= (-> this grace-period) (seconds 0))))))

(defmethod move! ((this orange-demon))
  "Update our position."
  (collide-shape-moving-method-58 (-> this root) (-> this root transv)))

(defbehavior orange-demon-post orange-demon ()
  "Basic post: Update grace period, shadow, joint control and disable sidekick."
  (update-direction-from-time-of-day (-> self draw shadow-ctrl))
  (false! (-> *setting-control* default play-hints))
  (send-event *target* 'sidekick #f)
  ;; joint control debug prints
  (if ORANGE_DEMON_DEBUG (aif (-> self skel) (debug-print-channels it (the symbol *stdcon*))))
  (when (= (-> *target* next-state name) 'target-continue)
    (set-time! (-> self grace-period))
    (set-time! (-> self state-time)))
  (if (time-elapsed? (-> self grace-period) (seconds 2)) (set! (-> self grace-period) (seconds 0)))
  (ja-post))

(defbehavior orange-demon-chase-post orange-demon ()
  "Chase post: Poll [[target]]'s position and update our own position, direction and trajectory time."
  (vector-copy! (-> self target-pos) (target-pos 0))
  (set! (-> self traj-time) (scale-traj-time))
  (format *stdcon* "traj-time ~f~%" (-> self traj-time))
  (let* ((y (if (and *target*
                     (logtest? (-> *target* control root-prim prim-core action) (collide-action racer))
                     (ppointer->process (-> *hud-parts* power))
                     (symbol-member? (-> (the hud-power (ppointer->process (-> *hud-parts* power))) next-state name) '(hud-arriving hud-in)))
              85
              132))
         (fnt (new 'stack 'font-context *font-default-matrix* 170 y 0.0 (font-color red) (font-flags shadow kerning middle)))
         (percent (cond
                    ((and (not (target-special-state?)) (<= (-> self traj-time) ORANGE_DEMON_MAX_SPEED)) 100.0)
                    (else (* (/ ORANGE_DEMON_MAX_SPEED (-> self traj-time)) 100.0))))
         (color-str (cond
                      ((<= percent 47.0) "~15L")
                      ((<= percent 60.0) "~6L")
                      ((<= percent 70.0) "~30L")
                      ((<= percent 80.0) "~20L")
                      ((<= percent 90.0) "~5L")
                      ((and (> percent 90.0) (< percent 100.0)) "~29L")
                      ((= percent 100.0) "~34L")
                      ((> percent 100.0) "~9L")
                      (else "~3L"))))
    (print-game-text (string-format "~1Lspeed: ~S~,,2f%" color-str percent) fnt #f 128 12))
  (compute-alignment! (-> self align))
  (move! self)
  (orange-demon-post))

;; dormant state: if target is not active, hide
(defstate orange-demon-dormant (orange-demon)
  :event orange-demon-event-handler
  :enter
    (behavior ()
      (logior! (-> self draw status) (draw-status hidden))
      (clear-collide-with-as (-> self root)))
  :code sleep-code
  :trans
    (behavior ()
      ;; (if (and *target* (= (-> *target* next-state name) 'target-death))
      ;;   (go orange-demon-victory)
      ;;   )
      (if *target* (go orange-demon-idle)))
  :exit
    (behavior ()
      (logclear! (-> self draw status) (draw-status hidden))
      (restore-collide-with-as (-> self root)))
  :post ja-post)

;; idle state: target was hit/grace period is active/etc.
(defstate orange-demon-idle (orange-demon)
  :event orange-demon-event-handler
  :enter
    (behavior ()
      (set-time! (-> self state-time)))
  :code
    (behavior ()
      (loop
        (ja-channel-set! 1)
        (ja-no-eval :group! sidekick-stance-loop-ja :num! min)
        (until (ja-done? 0)
          (suspend)
          (ja :num! (seek!)))))
  :trans
    (behavior ()
      ;; (if (and *target* (= (-> *target* next-state name) 'target-death))
      ;;   (go orange-demon-victory)
      ;;   )
      (if (and (should-chase? self) (nonzero? (-> self draw))) (go orange-demon-chase)))
  :post orange-demon-post)

(defstate orange-demon-chase (orange-demon)
  :event orange-demon-event-handler
  :enter
    (behavior ()
      (set-time! (-> self state-time)))
  :code
    (behavior ()
      (ja-channel-push! 1 (seconds 0.2))
      (ja :group! sidekick-free-walk-ja :num! min)
      (suspend)
      (loop
        (spawn (-> self part) (the vector (-> self root root-prim prim-core)))
        ;; set up trajectory to follow target
        (setup-from-to-duration! (-> self trajectory) (-> self root trans) (-> self target-pos) (-> self traj-time) 0.0)
        (orange-demon-follow-trajectory (ja-aframe-num 1))
        (if (or (> (dist-to-target self) (meters 25)) ORANGE_DEMON_DEBUG) (debug-draw! (-> self trajectory)))
        (if ORANGE_DEMON_DEBUG (debug-draw-text! self))
        (suspend)
        (ja :num! (loop! (1/ (-> self traj-time))))))
  :trans
    (behavior ()
      (if (not (should-chase? self)) (go orange-demon-dormant)))
  :post orange-demon-chase-post)

(defstate orange-demon-victory (orange-demon)
  :event orange-demon-event-handler
  :code
    (behavior ()
      (ja-channel-push! 1 (seconds 0.075))
      (ja-no-eval :group! sidekick-fuel-cell-victory-9-ja :num! min :frame-num 0.0)
      (until (ja-done? 0)
        (suspend)
        (ja :num! (seek!)))
      (go orange-demon-idle))
  :post orange-demon-post)
